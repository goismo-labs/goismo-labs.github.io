---
import Logo from "@/components/Logo.astro";
import menu from "@/config/menu.json";

export interface ChildNavigationLink {
  name: string;
  url: string;
  title?: string;
  description?: string;
  image?: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}

const { main }: { main: NavigationLink[] } = menu;
const { pathname } = Astro.url;
---

<header class="header">
  <nav class="navbar container">
    <!-- logo -->
    <div class="order-0">
      <Logo />
    </div>

    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      id="show-button"
      for="nav-toggle"
      class="order-2 flex cursor-pointer items-center lg:order-1 lg:hidden"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </label>
    <label
      id="hide-button"
      for="nav-toggle"
      class="order-2 hidden cursor-pointer items-center lg:order-1"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>
    <!-- /navbar toggler -->

    <ul
      id="nav-menu"
      class="navbar-nav order-3 hidden w-full lg:order-1 lg:flex lg:w-auto lg:space-x-2"
    >
      {
        main.map((menu, menuIndex) => (
          <>
            {menu.name === "Products" ? (

    <li class="nav-item nav-dropdown relative products-wrapper group">
  <input id="products-toggle" type="checkbox" class="hidden peer" />
  <!-- Menu Label -->
  <label for="products-toggle" class="nav-link inline-flex items-center cursor-pointer lg:cursor-default">
    {menu.name}
    <svg class="h-4 w-4 fill-current ml-1" viewBox="0 0 20 20">
      <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
    </svg>
  </label>

  <!-- Dropdown -->
  <div
    id="products-dropdown"
    class="hidden peer-checked:block lg:group-hover:block absolute left-0 top-full bg-white shadow-lg w-full lg:w-[48rem] z-10 p-4 lg:p-6 rounded-md mt-2 transition-all duration-300"
  >
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6">
      <!-- Left: Links -->
      <ul class="space-y-4">
        {menu.children?.map((child, index) => (
          <li
            class="flex items-start gap-3 cursor-pointer hover:text-primary"
            data-preview={`preview-${index}`}
          >
            <div>
              <a href={child.url} class="font-medium">{child.name}</a>
            </div>
          </li>
        ))}
      </ul>

     <!-- Right: Preview (Desktop only) -->
<div class="hidden lg:block relative min-h-[8rem]">
  <!-- Default message -->
<div
  id="default-preview"
  class="product-preview absolute top-0 left-0 w-full h-full flex items-center justify-center transition-opacity duration-300"
>
  <div class="text-gray-500 text-sm italic text-center">
    Hover on a product to see its short description.
  </div>
</div>

  {menu.children?.map((child, index) => (
    <div
      id={`preview-${index}`}
      class="product-preview hidden absolute top-0 left-0 w-full transition-opacity duration-300"
    >
      <div>
        <!-- Image + Title -->
        <div class="flex items-center gap-3 mb-1">
          <img
            src={child.image}
            alt={child.name}
            class="w-10 h-10 object-cover rounded-full border"
          />
          <a href={child.url} class="font-medium text-base">{child.name}</a>
        </div>
        <!-- Description -->
        <p class="text-sm text-gray-600">{child.description}</p>
      </div>
    </div>
  ))}
</div>

    </div>
  </div>
</li> ) : (
              <li class="nav-item">
                <a
                  href={menu.url}
                  class={`nav-link inline-block lg:block ${
                    (pathname === `${menu.url}/` || pathname === menu.url) && "active"
                  }`}
                >
                  {menu.name}
                </a>
              </li>
            )}
          </>
        ))
      }

      <li class="nav-item mt-2 lg:hidden">
        <a class="btn btn-white btn-sm border-border" href="/signin">
          Sign Up Now
        </a>
      </li>
    </ul>

    <div class="order-1 ml-auto hidden items-center md:order-2 md:ml-0 lg:flex">
      <a class="btn btn-white btn-sm" href="/signin">Sign Up Now</a>
    </div>
  </nav>
</header>
<script is:inline>
  document.addEventListener("astro:page-load", () => {
    // Product preview logic
    const previewElements = document.querySelectorAll(".product-preview");
    const defaultPreview = document.getElementById("default-preview");

    document.querySelectorAll("li[data-preview]").forEach((li) => {
      li.addEventListener("mouseenter", () => {
        const id = li.getAttribute("data-preview");
        
        // Hide all previews
        previewElements.forEach(el => el.classList.add("hidden"));

        // Show hovered preview
        const previewEl = document.getElementById(id);
        previewEl?.classList.remove("hidden");
      });

     li.addEventListener("mouseleave", () => {
  // Hide all previews including default
  previewElements.forEach(el => el.classList.add("hidden"));

  // Small delay to check if another product is hovered
  setTimeout(() => {
    const isAnyHovered = Array.from(document.querySelectorAll("li[data-preview]")).some(
      (item) => item.matches(":hover")
    );
    if (!isAnyHovered) {
      defaultPreview?.classList.remove("hidden");
    }
  }, 50);
});

    });

    // Sticky header
    const header = document.querySelector(".header");
    window.addEventListener("scroll", () => {
      header?.classList.toggle("header-sticky", window.scrollY > 0);
    });

    // Close dropdown on product link click
document.querySelectorAll(".products-wrapper a").forEach((link) => {
  link.addEventListener("click", () => {
    const dropdownToggle = document.getElementById("products-toggle");
    if (dropdownToggle) dropdownToggle.checked = false;
  });
});

    // Close dropdown when clicking outside
    const dropdownToggle = document.getElementById("products-toggle");
    const dropdownWrapper = document.querySelector(".products-wrapper");

    document.addEventListener("click", (event) => {
      if (
        dropdownToggle &&
        dropdownWrapper &&
        !dropdownWrapper.contains(event.target)
      ) {
        dropdownToggle.checked = false;
      }
    });
  });
</script>


