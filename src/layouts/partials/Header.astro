---
import Logo from "@/components/Logo.astro";
import menu from "@/config/menu.json";

export interface ChildNavigationLink {
  name: string;
  url: string;
  title?: string;
  description?: string;
  image?: string;
}

export interface NavigationLink {
  name: string;
  url: string;
  hasChildren?: boolean;
  children?: ChildNavigationLink[];
}

const { main }: { main: NavigationLink[] } = menu;
const { pathname } = Astro.url;
---

<header class="header">
  <nav class="navbar container">
    <!-- logo -->
    <div class="order-0">
      <Logo />
    </div>

    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      id="show-button"
      for="nav-toggle"
      class="order-2 flex cursor-pointer items-center lg:order-1 lg:hidden"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
    </label>
    <label
      id="hide-button"
      for="nav-toggle"
      class="order-2 hidden cursor-pointer items-center lg:order-1"
    >
      <svg class="h-6 fill-current" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>
    <!-- /navbar toggler -->

    <ul
      id="nav-menu"
      class="navbar-nav order-3 hidden w-full lg:order-1 lg:flex lg:w-auto lg:space-x-2"
    >
      {
        main.map((menu, menuIndex) => (
          <>
            {menu.name === "Products" ? (

   <li class="nav-item nav-dropdown relative products-wrapper group">
  <input id="products-toggle" type="checkbox" class="hidden peer" />
  <!-- Menu Label -->
  <label for="products-toggle" class="nav-link inline-flex items-center cursor-pointer lg:cursor-default">
    {menu.name}
    <svg class="h-4 w-4 fill-current ml-1" viewBox="0 0 20 20">
      <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
    </svg>
  </label>

  <!-- Dropdown -->
<div
  id="products-dropdown"
  class="hidden peer-checked:block lg:group-hover:block absolute left-0 top-full bg-white shadow-lg w-full sm:w-max min-w-[250px] z-10 p-4 rounded-md mt-0 transition-all duration-300"
>
  <ul class="flex text-start flex-col gap-4 w-full sm:w-max min-w-[250px]">
    {menu.children?.map((child, index) => (
      <li
        class="relative group/product product-item"
        data-index={index}
      >
        <a
          href={child.url}
          class="font-medium inline-block whitespace-nowrap hover:text-primary min-w-[250px]"
        >
          {child.name}
        </a>

        {/* Show card only on larger screens */}
        <div
          id={`product-card-${index}`}
          class="hidden lg:group-hover/product:block absolute top-0 left-full ml-4 w-72 bg-white shadow-md p-4 rounded-md z-20"
        >
          <div class="flex items-center gap-3 mb-2">
            <img
              src={child.image}
              alt={child.name}
              class="w-10 h-10 rounded-full border object-cover"
            />
            <span class="font-semibold">{child.name}</span>
          </div>
          <p class="text-sm text-gray-600">{child.description}</p>
        </div>
      </li>
    ))}
  </ul>
</div>
</li>
) : (<li class="nav-item">
                <a
                  href={menu.url}
                  class={`nav-link inline-block lg:block ${
                    (pathname === `${menu.url}/` || pathname === menu.url) && "active"
                  }`}
                >
                  {menu.name}
                </a>
              </li>
            )}
          </>
        ))
      }

      <li class="nav-item mt-2 lg:hidden">
        <a class="btn btn-white btn-sm border-border" href="/signin">
          Sign Up Now
        </a>
      </li>
    </ul>

    <div class="order-1 ml-auto hidden items-center md:order-2 md:ml-0 lg:flex">
      <a class="btn btn-white btn-sm" href="/signin">Sign Up Now</a>
    </div>
  </nav>
</header><script is:inline>
  // Wait for Astro page to fully load before executing scripts
  document.addEventListener("astro:page-load", () => {
    // Select all product menu items
    const items = document.querySelectorAll(".product-item");

    // ===== Sticky Header on Scroll =====
    const header = document.querySelector(".header");
    window.addEventListener("scroll", () => {
      // Add or remove 'header-sticky' class based on scroll position
      header?.classList.toggle("header-sticky", window.scrollY > 0);
    });

    // ===== Hover logic to show corresponding product card =====
    items.forEach((item) => {
      const index = item.getAttribute("data-index"); // Get index of item
      const card = document.getElementById(`product-card-${index}`); // Get matching card

      // Show the card when mouse enters the menu item
      item.addEventListener("mouseenter", () => {
        // Hide all cards first
        document.querySelectorAll(".product-card").forEach(el => el.classList.add("hidden"));
        // Then show the current hovered card
        card?.classList.remove("hidden");
      });

      // Hide the card when mouse leaves the menu item
      item.addEventListener("mouseleave", () => {
        card?.classList.add("hidden");
      });
    });
  });
</script>




